import streamlit as st
import pandas as pd
import faiss
import json
import ollama
from sentence_transformers import SentenceTransformer

# --- Load FAISS index v√† d·ªØ li·ªáu s·∫£n ph·∫©m ---
df = pd.read_pickle("product_data.pkl")
index = faiss.read_index("product.index")
encoder = SentenceTransformer('BAAI/bge-small-en-v1.5')

# --- B∆∞·ªõc 1: Tr√≠ch s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi b·∫±ng Mistral ---
def extract_products_mistral(user_input):
    prompt = (
        "B·∫°n l√† tr·ª£ l√Ω k·ªπ thu·∫≠t n√≥i ti·∫øng Vi·ªát. Ph√¢n t√≠ch ƒëo·∫°n sau v√† tr√≠ch xu·∫•t danh s√°ch s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng JSON. "
        "M·ªói s·∫£n ph·∫©m g·ªìm: t√™n s·∫£n ph·∫©m, s·ªë l∆∞·ª£ng (n·∫øu c√≥), k√≠ch th∆∞·ªõc (n·∫øu c√≥).\n"
        f"ƒêo·∫°n vƒÉn: {user_input}\n"
        "Tr·∫£ k·∫øt qu·∫£ JSON ƒë∆°n thu·∫ßn, kh√¥ng gi·∫£i th√≠ch."
    )

    response = ollama.chat(
        model="mistral",
        messages=[
            {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω k·ªπ thu·∫≠t chuy√™n ph√¢n t√≠ch s·∫£n ph·∫©m."},
            {"role": "user", "content": prompt}
        ]
    )

    content = response['message']['content']
    try:
        json_start = content.find("[")
        json_end = content.rfind("]") + 1
        return json.loads(content[json_start:json_end])
    except Exception as e:
        st.warning("Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c JSON t·ª´ m√¥ h√¨nh.")
        st.text(content)
        return []

# --- B∆∞·ªõc 2: T√¨m ki·∫øm s·∫£n ph·∫©m trong FAISS ---
def search_by_product_names(product_list, top_k=2):
    results = []
    for p in product_list:
        name = p.get("t√™n s·∫£n ph·∫©m", "")
        if not name:
            continue
        q_vector = encoder.encode([name])
        D, I = index.search(q_vector, top_k)
        found = df.iloc[I[0]].to_dict(orient="records")
        results.extend(found)
    return results

# --- B∆∞·ªõc 3: G·ªçi l·∫°i Mistral ƒë·ªÉ tr·∫£ l·ªùi ---
def chatbot_reply_with_context(user_input, product_info_list):
    product_text = "\n".join([f"- {p['name']}: {p['description']}" for p in product_info_list])
    final_prompt = (
        f"Ng∆∞·ªùi d√πng h·ªèi: \"{user_input}\"\n\n"
        f"D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m li√™n quan t√¨m ƒë∆∞·ª£c:\n{product_text}\n\n"
        "H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p."
    )

    response = ollama.chat(
        model="mistral",
        messages=[
            {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω k·ªπ thu·∫≠t chuy√™n t∆∞ v·∫•n s·∫£n ph·∫©m, n√≥i ti·∫øng Vi·ªát."},
            {"role": "user", "content": final_prompt}
        ]
    )

    return response['message']['content']

# --- Streamlit App ---
st.title("üõ†Ô∏è Chatbot T∆∞ v·∫•n S·∫£n ph·∫©m (Mistral + FAISS)")
user_input = st.text_area("Nh·∫≠p c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m:", height=100)

if st.button("G·ª≠i c√¢u h·ªèi") and user_input:
    with st.spinner("ü§ñ ƒêang ph√¢n t√≠ch..."):
        products = extract_products_mistral(user_input)
        matches = search_by_product_names(products)
        answer = chatbot_reply_with_context(user_input, matches)

    st.subheader("üìã Danh s√°ch s·∫£n ph·∫©m ph√¢n t√≠ch:")
    st.json(products)

    st.subheader("üîç K·∫øt qu·∫£ t√¨m ki·∫øm:")
    for item in matches:
        st.markdown(f"- **{item['name']}**: {item['description']}")

    st.subheader("üß† Tr·ª£ l√Ω ph·∫£n h·ªìi:")
    st.markdown(answer)
